name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install LLVM 18
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 18
          sudo apt-get install -y libpolly-18-dev
          echo "LLVM_SYS_181_PREFIX=/usr/lib/llvm-18" >> $GITHUB_ENV
      - name: Run Rust tests
        run: cargo test --all
      - name: Build Quarter for Forth tests
        run: cargo build --release
  build:
    name: Build Release Binary
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: quarter
            asset_name: quarter-linux-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: quarter
            asset_name: quarter-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: quarter.exe
            asset_name: quarter-windows-x86_64.exe

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install LLVM 18 (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 18
          sudo apt-get install -y libpolly-18-dev
          echo "LLVM_SYS_181_PREFIX=/usr/lib/llvm-18" >> $GITHUB_ENV

      - name: Install LLVM 18 (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install llvm@18
          echo "LLVM_SYS_181_PREFIX=$(brew --prefix llvm@18)" >> $GITHUB_ENV

      - name: Install LLVM 18 (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install llvm --version=18.1.8 -y --allow-downgrade
          echo "LLVM_SYS_181_PREFIX=C:\Program Files\LLVM" >> $env:GITHUB_ENV

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Linux and macOS)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          # Rename artifacts to match their target names
          mv artifacts/quarter-linux-x86_64/quarter release-assets/quarter-linux-x86_64
          mv artifacts/quarter-macos-aarch64/quarter release-assets/quarter-macos-aarch64
          mv artifacts/quarter-windows-x86_64.exe/quarter.exe release-assets/quarter-windows-x86_64.exe

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
